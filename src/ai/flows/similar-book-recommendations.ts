// This file is generated by Firebase Extensions Framework
'use server';

/**
 * @fileOverview A book recommendation AI agent.
 *
 * - findSimilarBooks - A function that handles the book recommendation process.
 * - FindSimilarBooksInput - The input type for the findSimilarBooks function.
 * - FindSimilarBooksOutput - The return type for the findSimilarBooks function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const FindSimilarBooksInputSchema = z.object({
  title: z.string().describe('The title of the book.'),
  author: z.string().describe('The author of the book.'),
  genre: z.string().describe('The genre of the book.'),
  mood: z.string().optional().describe('The mood of the book, e.g. adventurous, relaxing.'),
});
export type FindSimilarBooksInput = z.infer<typeof FindSimilarBooksInputSchema>;

const FindSimilarBooksOutputSchema = z.object({
  recommendations: z.array(
    z.object({
      title: z.string().describe('The title of the recommended book.'),
      author: z.string().describe('The author of the recommended book.'),
      genre: z.string().describe('The genre of the recommended book.'),
      mood: z.string().optional().describe('The mood of the recommended book.'),
      reason: z.string().describe('Why the book is recommended.'),
    })
  ).describe('A list of recommended books.'),
});
export type FindSimilarBooksOutput = z.infer<typeof FindSimilarBooksOutputSchema>;

export async function findSimilarBooks(input: FindSimilarBooksInput): Promise<FindSimilarBooksOutput> {
  return findSimilarBooksFlow(input);
}

const prompt = ai.definePrompt({
  name: 'findSimilarBooksPrompt',
  input: {schema: FindSimilarBooksInputSchema},
  output: {schema: FindSimilarBooksOutputSchema},
  prompt: `You are a book recommendation expert. A user liked the following book and is looking for recommendations:

Title: {{{title}}}
Author: {{{author}}}
Genre: {{{genre}}}
Mood: {{{mood}}}

Please provide a list of 3 similar books, with a short explanation of why each book is recommended.

Format your response as a JSON array of books:

[
  {
    "title": "Title of book",
    "author": "Author of book",
    "genre": "Genre of book",
    "mood": "Mood of book",
    "reason": "Why is this book recommended?"
  }
]`,
});

const findSimilarBooksFlow = ai.defineFlow(
  {
    name: 'findSimilarBooksFlow',
    inputSchema: FindSimilarBooksInputSchema,
    outputSchema: FindSimilarBooksOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
